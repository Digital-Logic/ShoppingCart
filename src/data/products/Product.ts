import { idGen, isSku } from "../keyGen";
import ProductSpec from "./ProductSpec";
import JSONMap from "../JSONMap";
import Entry from "../Entry";

export interface ProductDetails {
    name: string; // value to display to end user
    type?: string; // do we need this?
    sku?: string;
    price: number;
    quantity: number;
    sold: number;
}


class Product implements Entry {
    private _name: string;
    private _id: string;
    private _price: number;
    private _quantity: number;
    private _sold: number;
    private _variations: JSONMap<ProductSpec> = new JSONMap();

    public description: string;
    public features: Array<string>;
    public tags: Array<string>;
    public reviews: Array<string> = [];
    public rating: number; // generated by reviews

    constructor(name: string, description: string, variations: Array<ProductDetails>,
        features: Array<string> = [], tags: Array<string> = []) {

        this._name = name;
        this._id = idGen();

        this.description = description;
        this.rating = 0;
        this.features = features;
        this.tags = tags;

        // iterate through each product variation, add it to the product details.
        variations.forEach(({ name, price, sold, quantity }) => {
            const newVariation = new ProductSpec(this.id, name, price, sold, quantity);
            this._variations.set(newVariation.sku, newVariation);
        });

        // calculate and cache on request.
        this._price = 0;
        this._quantity = 0;
        this._sold = 0;
    }

    addTag(tag: string) {
        this.tags.push(tag);
    }

    addFeature(feature: string) {
        this.features.push(feature);
    }

    // identify can be a sku number, or id number
    getProduct(identify: string) {
        if (this._variations.has(identify)) {
            return this._variations.get(identify);
        } else {
            // check product ids
            for (let product of this._variations.values()) {
                if (product.id === identify)
                    return product;
            }
        }
        return null;
    }

    get variations() {
        return this._variations;
    }

    get name() {
        return this._name
    }
    get id() {
        return this._id;
    }
    get price() {
        // get the most popular option this product has, and catch it.
        if (this._price === 0) {
            this._price = Array.from(this._variations.values())
                .reduce((mostPopular, curItem) => {
                    if (curItem.sold > mostPopular.sold)
                        return curItem;
                    return mostPopular;
                }).price;
        }
        return this._price;
    }

    // calculate the total sold
    get sold() {
        return 0;
    }

    toJSON() {
        return {
            name: this.name,
            id: this.id,
            description: this.description,
            price: this.price,
            sold: this.sold,
            variations: this.variations
        };
    }
}

export default Product;